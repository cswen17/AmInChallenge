package core;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.Scanner;

import entryInfoType.Country;
import entryInfoType.TortureMethod;
import entryInfoType.Year;

public class EntryBuilder {

	public static void onExtracted(File xmlFile, File textFile) {
		extractData(xmlFile, textFile);
	}

	/**
	 * Extracts relevant data from a large text file that pertains to torture,
	 * hopefully within sections subtitled "Torture".
	 * 
	 * @param textFile
	 *            A .txt file that will hopefully contain data about torture
	 *            incidences.
	 * @return A String containing all entries related to torture
	 */
	public static String extractData(File xmlFile, File textFile) {
		try {
			Scanner sc = new Scanner(textFile);
			while (sc.hasNextLine()) {
				String line = sc.nextLine();
			}
		} catch (FileNotFoundException f) {
		}
		return null;
	}

	/* Finds the pattern using a rolling hash */
	private static int matchIndex(String corpus, String pattern) {
		int primeModulus = 71;

		// preprocess the pattern
		char[] patternRaw = pattern.toCharArray();
		int patternHash = patternHash(patternRaw, primeModulus, 0,
				patternRaw.length);

		// Begin processing corpus
		char[] corpusRaw = corpus.toCharArray();
		int corpusStartHash = patternHash(corpusRaw, primeModulus, 0,
				patternRaw.length);
		for (int i = patternRaw.length; i < corpusRaw.length; i++) {
			int nextChar = (int) corpusRaw[i];

		}

		return 0;
	}

	private static int patternHash(char[] string, int modulus, int s, int e) {
		if (string == null || e < s || modulus <= 0 || e >= string.length
				|| s < 0) {
			// modulus should be prime.
			// e is the ending index, s is the starting index
			throw new IllegalArgumentException();
		}
		int result = string[0];
		for (int i = s; i < e; i++) {
			int charAt = (int) string[i];
			result += charAt;
		}
		return result % modulus;
	}

	/**
	 * Attempts to find the country that the torture incident occurred in, given
	 * a corpus of report data. If no country is found, returns null. Otherwise,
	 * a collection of custom entryInfoType.Country Objects is constructed and
	 * returned.
	 * 
	 * @param corpus
	 * @return
	 */
	public static List<Country> findCountry(String corpus) {
		return null;
	}

	/**
	 * Attempts to find the years when the torture incident occurred, given a
	 * corpus of report data. If no years are found, returns null. Otherwise, a
	 * collection of custom entryInfoType.Year Objects is constructed and
	 * returned.
	 * 
	 * @param corpus
	 * @return
	 */
	public static List<Year> findTimes(String corpus) {
		return null;
	}

	/**
	 * Attempts to find the methods used to torture the victim(s), given a
	 * corpus of report data. If no methods are found, returns null. Otherwise,
	 * a collection of custom entryInfoType.TortureMethod Objects is constructed
	 * and returned.
	 * 
	 * @param corpus
	 * @return
	 */
	public static List<TortureMethod> findMethods(String corpus) {
		return null;
	}
}